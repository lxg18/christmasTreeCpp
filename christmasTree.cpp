#ifdef _WIN32
    #include <windows.h>
#endif
#include <iostream>
#include <stdlib.h>
#include <ctime>

using namespace std;

// ----------------------------------------------------//
#define ROWS 4 // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—è–¥–æ–≤ –≤–µ—Ç–≤–µ–π —ë–ª–∫–∏
// ----------------------------------------------------//
#define A cout << 'A'
#define O cout << '*'
#define H cout << 'H'
#define _ cout << " "
#define N cout << endl

int _size, step, _count, _end, stepDec, width, height;

int randomInt(int min_value, int max_value) {
    return rand() % (max_value - min_value + 1) + min_value;
}

void setColor(int backCol, int textCol) {
    //cout << "\[s"; // —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
    char com[] = "[37m [40m";
    com[3] = textCol+'0';
    com[9] = backCol+'0';
    cout << com << "\b";
    //cout << "\[u"; // –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
}

void printTree() {
    cout << "[1;1H"; // –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∫—É—Ä—Å–æ—Ä –≤ –Ω–∞—á–∞–ª–æ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
    step = 1;
    _count = 6;
    _end = _size / 2 - step;
    stepDec = 4;
    // –í–ï–¢–í–ò
    for (int i = 0; i <= _end; i++) {
        _; // –ø—Ä–æ–±–µ–ª
        if (i == _end && step <= _size) {
            for (int j = 0; j < step; j++) {
                // —Ñ–æ–Ω–∞—Ä–∏–∫
                if (j & 1) { // –µ—Å–ª–∏ —á–∏—Å–ª–æ –Ω–µ—á—ë—Ç–Ω–æ–µ
                    int rndCol = randomInt(0, 4);
                    rndCol = (rndCol == 0) ? 1 : (rndCol == 1) ? 4 : (rndCol == 2) ? 5 : (rndCol == 3) ? 6 : 7;
                    setColor(0, rndCol);
                    O; // –≤—ã–≤–æ–¥ O - –∏–≥—Ä—É—à–∫–∏
                }
                // –≤–µ—Ç–æ—á–∫–∞
                else {
                    setColor(0, 2);
                    A; // –≤—ã–≤–æ–¥ –ê - –≤–µ—Ç–æ—á–∫–∏
                }
            }
            N; // –Ω–æ–≤–∞—è —Å—Ä–æ–∫–∞
            i = 0;
            step += 2;
            if (step > _count) {
                step -= stepDec;
                stepDec += 2;
                _count += step;
            }
            if (_end == 1) break;
            _end = _size / 2 - step / 2;
        }
    }

    // –°–¢–í–û–õ
    setColor(0, 3); // —á—ë—Ä–Ω—ã–π —Ñ–æ–Ω, –∂—ë—Ç—ã–π —Ç–µ–∫—Å—Ç
    cout << "\[G"; // –∫—É—Ä—Å–æ—Ä –≤ –Ω–∞—á–∞–ª–æ —Å—Ç—Ä–æ–∫–∏
    for (int j = 0; j < height; j++) { // –≤—ã—Å–æ—Ç–∞
        for (int i = 0; i <= (_size/2-(width/2)); i++) { // —à–∏—Ä–∏–Ω–∞
            if (i == _size/2-(width/2)) {
                for (int w = 0; w < width; w++) H; // —Å–∏–º–≤–æ–ª —Å—Ç–≤–æ–ª–∞
            }
            _; // –ø—Ä–æ–±–µ–ª
        }
        cout << endl;
    }
    setColor(0, 7); // —á—ë—Ä–Ω—ã–π —Ñ–æ–Ω, –±–µ–ª—ã–π —Ç–µ–∫—Å—Ç
}

int main() {
    #ifdef _WIN32
        #define ENABLE_VIRTUAL_TERMINAL_PROCESSING 0x0004
        #define DISABLE_NEWLINE_AUTO_RETURN  0x0008
        HANDLE handleOut = GetStdHandle(STD_OUTPUT_HANDLE);
        DWORD consoleMode;
        GetConsoleMode( handleOut , &consoleMode);
        consoleMode |= ENABLE_VIRTUAL_TERMINAL_PROCESSING;
        consoleMode |= DISABLE_NEWLINE_AUTO_RETURN;
        SetConsoleMode( handleOut , consoleMode );
    #endif

    srand(time(0)); // –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—è
    cout << "[?25l"; // –æ—Ç–∫–ª—é—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞
    _size = ROWS == 1 ? 5 : 3; // 5
    for (int i = 1; i <= ROWS; i++) {
        _size += i * 2;
    }
    // —à–∏—Ä–∏–Ω–∞ —Å—Ç–≤–æ–ª–∞
    width = (_size * 0.15 > 0) ? _size * 0.15 : 1;
    height = width * 2;
    if (!(width & 1)) width++; // –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–≤–æ–ª–∞
    while (1) printTree();
    return 0;
}


